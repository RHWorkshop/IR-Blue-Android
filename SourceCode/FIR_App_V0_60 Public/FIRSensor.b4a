Version=2.52
IconFile=
NumberOfModules=0
Package=mardaso.sensor.fir.sensor
DoNotOverwriteManifest=False
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.basic4ppc.com/forum/showthread.php?p=78136~\n~'<uses-sdk android:minSdkVersion="4" android:targetSdkVersion="15" />~\n~'<uses-sdk android:minSdkVersion="4" />~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="4" />~\n~<uses-permission android:name="android.permission.BLUETOOTH" />~\n~<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~
UserTypesHint=NameAndMac
NumberOfFiles=1
File1=1.bal
NumberOfLibraries=6
Library1=acl
Library2=camera
Library3=core
Library4=phone
Library5=reflection
Library6=serial
@EndOfDesignText@
#Region Module Attributes
	#FullScreen: False
	#IncludeTitle: True
	#ApplicationLabel: FIRsensor
	#VersionCode: 2
	#VersionName: 
	#SupportedOrientations: landscape
	#CanInstallToExternalStorage: True
#End Region

''/ 
'   FIRsensor, program to communicate with the IR-Blue FIR Sensor
'
'   Copyright (C) 2013  Marcel Damhuis (MarDaSo)
'	
'	Email: opensource@mardaso.com
'   Http:  www.mardaso.com
'
'	This work Is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
'	To View a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/.
'
'   This program Is distributed In the hope that it will be useful,
'   but WITHOUT ANY WARRANTY; without even the implied warranty of
'   MERCHANTABILITY OR FITNESS For A PARTICULAR PURPOSE.  
'	
'	If you want to use the software commercially please contact me at: license@mardaso.com
'
'	Credits:
' 	Reflection Written by Andrew Graham
'	Reflector library is available at: 
'
'	http://www.basic4ppc.com/forum/additional-libraries-classes-official-updates/6767-reflection-library-6.html#post108218
'
'	B4A forum: http://www.basic4ppc.com/forum/index.php
'
''/	

Sub Process_Globals
	Dim serial1 As Serial
	Dim TextReader1 As TextReader
	Dim TextWriter1 As TextWriter
	Dim Timer1, Timer2 As Timer
	Dim connected As Boolean
	Dim IR_Palette(120,3) As Int 
	Dim admin As BluetoothAdmin
	Dim foundDevices As List
	Type NameAndMac (Name As String, Mac As String)
	Dim connectedDevice As NameAndMac
End Sub


Sub Globals
	Dim camera1 As Camera
    Dim Panel2, TouchPanel, IRData As Panel
	Dim PrtScr,  BtnAlpha As Button
	Dim txtLog As EditText
	Dim txtSend As EditText
	Dim SeekBar1,SeekBar2,SeekBar3 As SeekBar 
	Dim PalView, PalView2, Imageview1 As ImageView  
	Dim csvPanelView, csvPalview As Canvas 
	Dim Rect1, Rect2 As Rect 
	Dim CheckBox1 As CheckBox 
	Dim AUTOSCALE, InterPol As Boolean  
	Dim PTAT, PIX_0, Lmin, LMax, label1, Label2, Label3 As Label 
	Dim MinTemp, MaxTemp, SpotTemp, PTATTemp, ScaleStatus, LPalette, LabAlpha  As Label 
	Dim EditText1, EditText2  As EditText
	Dim irVal(64) As Int
    Dim regVal(4) As Int
    Dim T_Ir(64) As Float
	Dim Ir_array(36,144) As Float
    Dim Kt1 As Double
    Dim Kt2 As Double
    Dim VTH As Double
 	Dim TGC As Double
	Dim Acp As Double
    Dim Bcp As Double
    Dim Bi_scale As Byte
	Dim Bi(64) As Int
    Dim Ai(64) As Int
    Dim D_Alpha(64) As Int
	Dim Emmission As Double
	Dim Alpha_0_scale As Double 
	Dim Alpha_d_scale As Double 
	Dim Alpha_common As Double
	Dim eVal(255) As Int
	Dim ValR As Int
    Dim ValG As Int
    Dim ValB As Int
	Dim CalcX, CalcY As Float
	Dim Tx, Ty, Thx, Thy As Float 
	Dim HoldActive, SerOn As Boolean 
	Dim scaleMax, scaleMin As Float 
    Dim  IPalette, IPause, IHz, AutoMode As Int
	Dim Datatxt, DataCalc, Freq As String 
	Dim btnMinPlus As Button
	Dim btnMaxMinus As Button
	Dim btnMinMinus As Button
	Dim btnMaxPlus As Button
	Dim Autoscale2, BPalette, btnPause, BtnHz, BtnCam As Button
	Dim refl As Reflector 
	Dim refrIRData, ICam, RefreshTime, OldFadeCam, OldFadeNoCam As Int
	Dim Fade, Xoffset, Yoffset As Int
	Dim Timercount As Int 
End Sub

Sub Activity_Create(FirstTime As Boolean)
	RefreshTime = 40 '100 '80 '25 best?
	If FirstTime Then
		serial1.Initialize("Serial1")
		Timer1.Initialize("Timer1", RefreshTime)
		Timer2.Initialize("Timer2", 100)
	End If
	Activity.LoadLayout("1")
	Activity.AddMenuItem("SecConnect", "mnuConnect")
	Activity.AddMenuItem("InsConnect", "mnuInsConnect")
	Activity.AddMenuItem("Disconnect", "mnuDisconnect")
	Activity.AddMenuItem("Settings", "mnuSettings")	
	Activity.TitleColor = Colors.RGB(154,205,50)
	Activity.Title = "FIRsensor V0.60 demo source code MarDaSo 2013"
	Panel2.Initialize ("")
	Activity.AddView (Panel2, Round(12.5%x) , 12dip, 75%x, 80%y)
	 Panel2.SendToBack
	CalcX = -1 + Round(75%x/144)
	CalcX = CalcX * 144
	CalcY = CalcX/4
	Xoffset = 20dip
	Yoffset = 0dip
	IRData.Initialize ("")
	Activity.AddView (IRData, (Panel2.Left+Xoffset+(Panel2.Width -CalcX)/2) , (Panel2.Top + Yoffset+(Panel2.Height/2 - CalcY/2)), CalcX, CalcY)
	csvPanelView.Initialize(IRData)
	Label3.Left = Label3.Left + Xoffset
	Label3.Top  = Label3.top + Yoffset
	Label3.BringToFront 
	Imageview1.Color = Colors.Black 
	Imageview1.SendToBack 
	PalView.Initialize ("")
     Activity.AddView (PalView,PalView2.Left ,PalView2.Top ,PalView2.Width ,PalView2.Height )
	csvPalview.Initialize(PalView)
	DrawPalettte(100,0)
	scaleMin = 0
    scaleMax = 50
	MinTemp.Text = Round2(scaleMin,1)
	MaxTemp.Text = Round2(scaleMax,1)
	label1.TextColor = Colors.Red  
	label1.Text= "D"
	Label2.Text= RefreshTime
	AUTOSCALE = True
	AutoMode = 1
	IPalette = 0
	IHz = 4 '4Hz default
	refrIRData = 0
	Fade = 128
	OldFadeCam = 128
	OldFadeNoCam = 255
	LabAlpha.Text = Fade
	ICam = 1
	Timercount = 0
	EEPROM_Defaults
	InterPol = False
	SerOn = False
End Sub

Sub Camera1_Ready (Success As Boolean)
	If Success Then
		camera1.StartPreview
	Else
		ToastMessageShow("Cannot open camera.", True)
	End If
End Sub

Sub Activity_Resume
 	Dim pws As PhoneWakeState
	If serial1.IsEnabled = False Then
		Msgbox("Please enable Bluetooth.", "")
	Else
		serial1.StopListening
		serial1.Disconnect
		connected = False
		SerOn = False
	End If
	pws.KeepAlive(True)     ' display stays on
	camera1.Initialize(Panel2, "Camera1")
End Sub
Sub Activity_Pause (UserClosed As Boolean)
 	Dim pws As PhoneWakeState
	If UserClosed Then
		serial1.StopListening
		serial1.Disconnect
		connected = False
		SerOn = False
	End If
	pws.ReleaseKeepAlive    ' display stays off
    camera1.StopPreview
    camera1.Release
End Sub

Sub Save_Screen(CamOn As Boolean )
 	Dim Out As OutputStream
	Dim Obj1, Obj2 As Reflector
   	Dim bmp As Bitmap
   	Dim C As Canvas
   	Dim now, I As Long
   	Dim dt As String
	Dim args(1) As Object
   	Dim types(1) As String
   	DateTime.DateFormat = "yyMMddHHmmss"
   	now = DateTime.now
  	dt = "FIR" & DateTime.Date(now) ' e.g.: "110812150355" is Aug.12, 2011, 3:03:55 p.m.
	IRData.BringToFront 
	Label3.BringToFront
	Label2.BringToFront 
	label1.BringToFront 
	SpotTemp.BringToFront 
	PTATTemp.BringToFront 
	'then make a screen shot
    Obj1.Target = Obj1.GetActivityBA
   	Obj1.Target = Obj1.GetField("vg")
   	Obj1.RunMethod("forceLayout")  
   	bmp.InitializeMutable(Activity.Width, Activity.Height)
   	C.Initialize2(bmp)
   	Obj2.Target = C
   	Obj2.Target = Obj2.GetField("canvas")
   	args(0) = Obj2.Target
   	types(0) = "android.graphics.Canvas"
   	Obj1.RunMethod4("draw", args, types)
   	Out = File.OpenOutput(File.DirRootExternal, dt & ".png", False)
   	'Out = File.OpenOutput(File.DirDefaultExternal, dt & ".png", False)
   	bmp.WriteToStream(Out, 100, "PNG")
   	Out.Close
   	ToastMessageShow("Image saved: " & File.Combine(File.DirRootExternal, dt & ".png"), True)
	Imageview1.SendToBack 
	If CamOn = True Then
		camera1.StartPreview
	End If	
	SerOnOff(True)
	Timer2.Enabled = True
	Timer1.Enabled = True
End Sub

Sub Camera1_PictureTaken (Data() As Byte)
	Dim In As InputStream
	In.InitializeFromBytesArray(Data, 0, Data.Length)
	Dim bmp1 As Bitmap
	bmp1.Initialize2(In)
	Imageview1.Bitmap = bmp1
	Imageview1.BringToFront
	Save_Screen(True)
End Sub


Sub PrtScr_Click
' Take a screenshot.
	SerOnOff(False)
	Timer1.Enabled = False
	Timer2.Enabled = False					
	If ICam = 1 Then
   		camera1.TakePicture 
	Else
		Save_Screen(False)
	End If	
End Sub

Sub btnPause_click
	If IPause = 0 Then
		IPause = 1
		btnPause.TextColor = Colors.Yellow 
		btnPause.Text = "PAUSE"
		SerOnOff(False)
	Else
		IPause = 0
		btnPause.TextColor = Colors.RGB(154,205,50) 		
		btnPause.Text = "RUN"
		SerOnOff(True)
	End If
End Sub
Sub SendserialData(Data As String)
	If connected = True Then
		TextWriter1.Write(Data & Chr(13) & Chr(10)) 
		TextWriter1.Flush
	Else
		Msgbox("Not connected.", "")
	End If
End Sub

Sub Autoscale2_click
	AutoMode = AutoMode +1
	If AutoMode > 3 Then
		AutoMode = 1
	End If
	If AutoMode = 3 Then
		AUTOSCALE = False
		Autoscale2.TextColor = Colors.Red 		
		Autoscale2.Text = "AUTO"
	End If
	If AutoMode = 1 Then
		AUTOSCALE = True
		Autoscale2.TextColor = Colors.RGB(154,205,50)
		Autoscale2.Text = "AUTO"		
	End If
	If AutoMode = 2 Then
		AUTOSCALE = True
		Autoscale2.TextColor = Colors.Yellow
		Autoscale2.Text = "AUTO"		
	End If

End Sub

Sub BPalette_click
	If IPalette = 0 Then
		IPalette = 1
		BPalette.Text = "RGB"
	Else
		IPalette = 0
		BPalette.Text = "IRON"
	End If
	DrawPalettte(100,IPalette)
	DrawPixels
End Sub

Sub BtnAlpha_click
	Fade = Fade + 32
	If Fade > 255 Then
		Fade = 31
	End If
	DrawPixels
	LabAlpha.Text = Fade
End Sub

Sub BtnAlpha_longclick
'Change refresh rate of the sensor
'Can crash the sensor!!!
'Not stable need to update the frimware of the sensor for this
'
	IHz = IHz + 1
	If IHz >6 Then
		IHz = 1
	End If	
	SendserialData("H")
End Sub

Sub BtnCam_click
'Camera on/off
	If ICam = 0 Then
		ICam = 1
		BtnCam.TextColor = Colors.RGB(154,205,50)
		camera1.Initialize(Panel2, "Camera1")
		OldFadeNoCam = Fade
		Fade = OldFadeCam
		Label3.BringToFront 
	Else
		ICam = 0
		BtnCam.TextColor = Colors.Red
	    camera1.StopPreview
	    camera1.Release
		OldFadeCam = Fade
		Fade = OldFadeNoCam
		Imageview1.Color = Colors.Black 
		Label3.BringToFront 
	End If
	LabAlpha.Text = Fade
End Sub

Sub SerOnOff(OnOff As Boolean )
'Serial connection on/off
	If connected = True Then
		If OnOff = True Then
			serial1.Listen
			SerOn = True
		Else
			serial1.StopListening
			SerOn = False
		End If
	End If	
End Sub

Sub PrtScr_LongClick
'Interpolation On/Off
	If InterPol = False Then
		InterPol = True
	Else
		InterPol = False
	End If
End Sub

Sub btnMaxPlus_LongClick
'Long click for adding 10 degrees in manual mode
	scaleMax = scaleMax + 10
	If connected = False Then
		DrawIRDATA
	End If
 End Sub
 Sub btnMaxMinus_LongClick
'Long click for subtracting 10 degrees in manual mode
	scaleMax = scaleMax - 10
	CheckScaleMin
	If connected = False Then
		DrawIRDATA
	End If
 End Sub
 Sub btnMinPlus_LongClick
 'Long click for adding 10 degrees in manual mode
    scaleMin = scaleMin + 10
	CheckScaleMin
	If connected = False Then
		DrawIRDATA
	End If
 End Sub
 Sub btnMinMinus_LongClick
 'Long click for subtracting 10 degrees in manual mode
	scaleMin = scaleMin - 10
	If connected = False Then
		DrawIRDATA
	End If
 End Sub
 
 Sub btnMaxPlus_Click
 'short click for adding 0.5 degrees in manual mode
	scaleMax = scaleMax + 0.5
	If connected = False Then
		DrawIRDATA
	End If
 End Sub
 Sub btnMaxMinus_Click
  'short click for subtracting 0.5 degrees in manual mode
	scaleMax = scaleMax - 0.5
	CheckScaleMin
	If connected = False Then
		DrawIRDATA
	End If
 End Sub
 Sub btnMinPlus_Click
  'short click for adding 0.5 degrees in manual mode
    scaleMin = scaleMin + 0.5
	CheckScaleMin
	If connected = False Then
		DrawIRDATA
	End If
 End Sub
 Sub btnMinMinus_Click
  'short click for subtracting 0.5 degrees in manual mode
	scaleMin = scaleMin - 0.5
	If connected = False Then
		DrawIRDATA
	End If
 End Sub
  Sub CheckScaleMin
  	If scaleMin >= scaleMax Then
		scaleMin = scaleMax - 1
	End If
 End Sub

Sub mnuConnect_Click
	'Secure bluetooth connection
	Dim PairedDevices As Map
	PairedDevices = serial1.GetPairedDevices
	Dim L As List
	L.Initialize 
	For I = 0 To PairedDevices.Size - 1
		L.Add(PairedDevices.GetKeyAt(I))
	Next
	Dim res As Int
	res = InputList(L, "Choose device", -1) 'show list with paired devices
	If res <> DialogResponse.CANCEL Then
		serial1.Connect(PairedDevices.Get(L.Get(res))) 'convert the name to mac address
	End If
End Sub

Sub mnuInsConnect_Click
	'Insecure bluetooth connection
	Dim PairedDevices As Map
	PairedDevices = serial1.GetPairedDevices
	Dim L As List
	L.Initialize 
	For I = 0 To PairedDevices.Size - 1
		L.Add(PairedDevices.GetKeyAt(I))
	Next
	Dim res As Int
	res = InputList(L, "Choose device", -1) 'show list with paired devices
	If res <> DialogResponse.CANCEL Then
		serial1.ConnectInsecure(admin,PairedDevices.Get(L.Get(res)), 1)
	End If
End Sub

Sub Serial1_Connected (Success As Boolean)
	If Success Then
		ToastMessageShow("Connected successfully", False)
		TextReader1.Initialize(serial1.InputStream)
		TextWriter1.Initialize(serial1.OutputStream)
		Timer1.Enabled = True
		Timer2.Enabled = True
		connected = True
		SerOn = True
		SendserialData("R001")
	Else
		SerOn = False
		connected = False
		Timer1.Enabled = False
		Timer2.Enabled = False
		Msgbox(LastException.Message, "Error connecting.")
	End If
End Sub
Sub mnuDisconnect_Click
	'Disconnect bluetooth
	serial1.StopListening 
	serial1.Disconnect
	connected = False
	SerOn = False
End Sub

Sub mnuSettings_Click
	ToastMessageShow("Working on this!", False)
End Sub
Sub EEPROM_Defaults
	'Backup for if there's no useable EEPROM Data available 
	Dim x As Byte 
	Kt1 = 22.7998
    Kt2 = -0.0044441
    VTH = 6752
 	TGC = 0 '35
	Acp = -48
    Bcp = -54
    Bi_scale = 8
	Emmission = 0.949981
	Alpha_0_scale = 42
	Alpha_d_scale = 33
	Alpha_common = 54756/Power(2,42)
	For x = 0 To 63
		D_Alpha(x) = 170
		Ai(x) = -42
		Bi(x) = -63
	Next
	label1.TextColor = Colors.Red  
	label1.Text= "D"
End Sub


Sub DrawIRDATA()
	MinTemp.Text = Round2(scaleMin,1)
	MaxTemp.Text = Round2(scaleMax,1)
	'Label3.Text = Round2(((T_Ir(23)+T_Ir(40)+T_Ir(24)+T_Ir(39))/4),2) 'average of 4 pixels
	Label3.Text = T_Ir(23)
	If InterPol = True Then
	 Interpolation
	End If 
	'Put the pixels on the screen
	DrawPixels
	Label3.BringToFront 
End Sub

Sub Calculation 
    Dim xPos As Int
	Dim rPos As Int
	Dim ePos As Int
	Dim sPos As Int
    Dim rAddr As Byte
    Dim pVal As Int
    Dim iVal As Int
	Dim rVal As Float 
    Dim iMax As Double
    Dim iMin As Double
    Dim iAddr As Byte
    Dim iValIR As Int 
    Dim eAddr As Int
    Dim ta As Double
    Dim Vcp As Double
    Dim Vir As Double
    Dim T0 As Double
    Dim Vcp_off_comp As Double
    Dim Vir_off_comp As Double
    Dim Vir_TGC_comp As Double
    Dim Vir_comp As Double
    Dim Alpha As Double
	Dim xa As Int
	Dim ya As Int
	Dim x As Float
	Dim y As Float

    ' Data format:
    ' EEPROM data:   EAAADDD    AAA = address string, DDD = Data string
    ' REGISTER data: RAAADDDDDD AAA = address string, DDD = Data string
	' Frequency setting: FDD    DD = Data string
    ' IR Pixel data: IAAADDDDDDAAADDDDDD AAA = address string, DDD = Data string
    ' New IR Pixel data: I,DDDDDD,DDDDDD,etc (, only for better reading) AAA = address string, DDD = Data string
	
    ' Filter data from serial data
	If IPause = 0 Then
		Datatxt = DataCalc
        If Datatxt.StartsWith("E") = True  Then
			eAddr = 0
		    rPos = Datatxt.IndexOf("E")
        	ePos = Datatxt.IndexOf("EX")
		    For xPos = 0 To ((ePos - 5) - rPos) Step 3
                sPos = rPos + xPos
                eVal(eAddr) = Datatxt.Substring2(sPos + 1, sPos + 4)
                eAddr = eAddr + 1
			Next
			VTH = 256*eVal(219)+eVal(218)'6752
			If VTH > 32767 Then
				VTH = VTH - 65536
			End If
			
			Kt1 = 256*eVal(221) + eVal(220)
			If Kt1 > 32767 Then
				Kt1 = Kt1 - 65536
			End If 	
			Kt1 = Kt1/1024
			
			Kt2 = (256*eVal(223)+eVal(222))
			If Kt2 > 32767 Then
				Kt2 = Kt2 - 65536
			End If 	
			Kt2 = Kt2/1048576
			
			Emmission = (256*(eVal(229))+eVal(228))/32768 '0.949981
			Bi_scale = eVal(217) '8
			TGC = eVal(216)
			If TGC > 32767 Then
				TGC = TGC - 65536
			End If 

			Acp = eVal(212)
			If Acp > 127 Then
					Acp = Acp - 256
			End If	
			
			Bcp = eVal(213)
			If Bcp > 127 Then
					Bcp = Bcp - 256
			End If	

			For xPos = 128 To 191			
				D_Alpha(xPos-128) = eVal(xPos)
			Next			
			
			For xPos = 64 To 127			
				If eVal(xPos) > 127 Then
						Bi(xPos-64) = eVal(xPos)-256
					Else
						Bi(xPos-64) = eVal(xPos)
				End If
			Next
			
			For xPos = 0 To 63			
				If eVal(xPos) > 127 Then
						Ai(xPos) = eVal(xPos)-256
					Else
						Ai(xPos) = eVal(xPos)
				End If
			Next
						
			Alpha_0_scale = eVal(226)
			Alpha_d_scale = eVal(227)
			Alpha_common = 	(256*eVal(225)+eVal(224))/Power(2, Alpha_0_scale)	
			
			label1.TextColor = Colors.RGB(154,205,50) 
			label1.Text= "E"
		End If
		
       	rPos = Datatxt.IndexOf("I")
        ePos = Datatxt.IndexOf("X")

        If Datatxt.StartsWith("R") = True Then
            regVal(0) = Datatxt.Substring2(4, 10)
            regVal(1) = Datatxt.Substring2(13, 19)
        End If
		' Calculate the values
		' For details see Melexis MLX90620 datasheet
		'
		rVal = regVal(0)
		Vcp = regVal(1)
		If Vcp > 32767 Then
			Vcp = Vcp - 65536
		End If

        ta = (((-1 * Kt1) + Sqrt((Kt1 * Kt1) - (4 * Kt2) * (VTH - rVal))) / (2 * Kt2)) + 25
        PTATTemp.text = Round2(ta, 2)
		Vcp_off_comp = Vcp - (Acp + (Bcp / Power(2, Bi_scale) * (ta - 25)))
		
        If rPos > 0 Then
            iMax = 0
            iMin = 100
			iAddr = -1
			If VTH = 0 Then
				EEPROM_Defaults
			End If
            For xPos = 0 To ((ePos - 7) - rPos) Step 6
                sPos = rPos + xPos
                iAddr = iAddr + 1
                irVal(iAddr) = Datatxt.Substring2(sPos + 1, sPos + 7)
                iValIR = irVal(iAddr)
				If iValIR > 127 Then
					iValIR = iValIR - 256
				End If	
                'do some calculations

                Vir_off_comp = iValIR - (Ai(iAddr) + (Bi(iAddr) / Power(2, Bi_scale) * (ta - 25)))
                Alpha =  Alpha_common  + (D_Alpha(iAddr)/Power(2,Alpha_d_scale))  '0.000000029097
				Vir_TGC_comp = Vir_off_comp - ((TGC / 32) * Vcp_off_comp)
                Vir_comp = Vir_TGC_comp / Emmission
                T0 = Power((Vir_comp / Alpha + Power((ta + 273.15), 4)), 0.25) - 273.15
                T_Ir(iAddr) = Round2(T0, 2)
				If T_Ir(iAddr) > iMax Then
                        iMax = T_Ir(iAddr)
                        SpotTemp.Text = Round2(iMax, 2)
                End If
                If AUTOSCALE  = True Then
					If AutoMode = 1 Then
                        scaleMax = Round2(iMax, 1)
					Else	
						scaleMax = Ceil((scaleMax + Ceil(iMax)) /2)
					End If 	
                    If T_Ir(iAddr) < iMin Then
                        iMin = T_Ir(iAddr)
                    	If AutoMode = 1 Then
							scaleMin = Round2(iMin, 1)
						Else
							scaleMin = Floor((scaleMin + Floor(iMin))/2)
						End If
					End If
					If AutoMode = 1 Then
						If scaleMin >= (scaleMax -5) Then
							scaleMin = scaleMax - 5
						End If
					Else
						If scaleMin >= (scaleMax -10) Then
							scaleMin = scaleMax - 10
						End If
					End If
                Else
                    CheckScaleMin
					iMin = scaleMin
                    iMax = scaleMax
                End If
            Next
        End If
	End If	

		'Fill 9x9 pixel array
		'
		If InterPol = False Then
			For y = 0 To 3
			 For x = 0 To 15
			 iAddr = x*4 + y
				For ya = y*9 To (y*9 + 8)
					For xa = x*9 To (x*9 + 8) 
						Ir_array(ya,xa) = T_Ir(iAddr)
					Next
				Next
			  Next	
			Next
		End If

End Sub

Sub Interpolation()
' Put your interpolation code here
' You should process the data in the 9x9 grid (see calculation part)
InterPol = False
End Sub


Sub PixColor(Value As Float, sclMin , sclMax , Palette As Int)
	'Calculate palette values Iron and RGB
    Dim scalePos As Float
    Dim TempStep As Float
	Dim CalR As Float
    Dim CalG As Float
    Dim CalB As Float
    ValR = 0
    ValG = 0
    ValB = 0
	Select Palette
		Case 0
		'IRON Palette
		    If Value > (sclMax - (sclMax * 0.01)) Then
			' Max values White			
		        ValR = 255
		        ValG = 255
		        ValB = 255
		    Else
		        TempStep = (sclMax - sclMin) / 100  	'1
		        scalePos = (Value - sclMin) / TempStep	'V = 50 , 50
		        CalR = Round((scalePos - 15)  * 2.55 * 2)      '50-15 = 35 * 2 * 2.55 = 70%
		        If CalR > 255 Then
		            ValR = 255
		        Else
		            If CalR < 0 Then
		                ValR = 0
		            Else
						ValR = CalR
		            End If
		        End If
		        CalG = Round((scalePos - 50)  * 2.55 * 2.0)     '0
				If (scalePos - 50) > 0 Then 
		            If CalG > 255 Then
		                ValG = 255
		            Else
		                If CalG < 0 Then
		                    ValG = 0
		                Else
		                    ValG = CalG
		                End If
		            End If
				Else
				    ValG = 0
				End If
		        CalB = scalePos  * 2.55
					If scalePos > 50 Then
		                ValB = Round((100 - scalePos) * 2.55)    'CByte(255 - CalB / 2)
		            Else
		                If CalB < 0 Then
		                    ValB = 0
		                Else
							ValB = CalB
		                End If
		            End If
			End If
		Case 1
		'RGB Palette		
			If Value > (sclMax - (sclMax * 0.01)) Then
			' Max values RED
		        ValR = 255
		        ValG = 0
		        ValB = 0
			Else	
				TempStep = (sclMax - sclMin) / 100  	'1
		        scalePos = Round((Value - sclMin) / TempStep)	'V = 50 , 50
				CalR = Round((scalePos - 50)  * 2.55 * 2)      '50-15 = 35 * 2 * 2.55 = 70%
				If (scalePos - 50) > 0 Then 				
			        If CalR > 255 Then
			            ValR = 255
			        Else
			            If CalR < 0 Then
			                ValR = 0
			            Else
							ValR = CalR
			            End If
			        End If
				End If
		        CalG = Round(scalePos * 2.55) 'Round((scalePos - 15) * 4)
				If ((scalePos - 15) > 0) AND (scalePos < 51) Then 
		            If CalG > 255 Then
		                ValG = 255
		            Else
		                If CalG < 0 Then
		                    ValG = 0
		                Else
		                    ValG = CalG
		                End If
		            End If
				Else
					If scalePos > 50 AND scalePos < 85 Then
					 	ValG = 255 - Round(scalePos * 2.55)
					Else
						If scalePos = 50 Then
		                	'ValG = 128
						Else
							ValG = 0						
						End If	
					End If	
				End If
				If scalePos > 0 AND scalePos < 50 Then
	                ValB = 255 - Round((50 + scalePos) * 2.55)
	            Else
					If scalePos = 0 Then
						ValB = 255 ' CalB
					Else 
						ValB = 0
					End If	
	            End If
            End If
		End Select
End Sub

Sub PalColor(Value As Float, sclMax, sclMin As Int)
        Dim scaleP As Float
        Dim TempSt As Float
	    ValR = 0
        ValG = 0
        ValB = 0
		
	    If Value > (sclMax - (sclMax * 0.01)) Then
        	'Make the hotspots white
			ValR = 255
            ValG = 255
            ValB = 255
        Else
            TempSt = (sclMax - sclMin) / 100  	'1
            scaleP = Round((Value - sclMin) / TempSt)	'V = 50 , 50
			If scaleP < 0 Then
				ValR = 255
	            ValG = 255
	            ValB = 255
			Else
	            ValR = IR_Palette(scaleP,0)
	            ValG = IR_Palette(scaleP,1)
	            ValB = IR_Palette(scaleP,2)
			End If
		End If
End Sub
Sub DrawIRPixel(x As Int, y As Int, R As Int ,G As Int, B As Int)
	Dim pixelh As Int
	Dim pixelw As Int
	Dim startposX As Int
	Dim startposY As Int
	'Do some scaling depending on the device used
	pixelw = Round(IRData.Width/144)
	pixelh = pixelw
	startposX = x * pixelw
	startposY = y * pixelh
	Rect1.Initialize(startposX, startposY, (startposX + pixelw), (startposY + pixelh))
	csvPanelView.DrawRect( Rect1, Colors.ARGB(Fade, R, G, B), True, 2dip)
End Sub

Sub DrawPixels()
	Dim x As Int
	Dim y As Int
	Dim scaleP As Float
    Dim TempSt As Float
	ValR = 128
	ValG = 20
	ValB = 45
	csvPanelView.DrawColor(Colors.Transparent)
	For y = 0 To 35
		For x = 0 To 143
	    If Ir_array(y,x) > (scaleMax - (scaleMax * 0.01))  Then
			If IPalette = 0 Then
	            ValR = 255
	            ValG = 255
	            ValB = 255
			Else
				ValR = 255
            	ValG = 0
            	ValB = 0
			End If
        Else
            TempSt = (scaleMax - scaleMin) / 100  	'1
            scaleP = Round((Ir_array(y,x) - scaleMin) / TempSt)	'V = 50 , 50
			If scaleP <= 0 Then
				If IPalette = 0 Then
					ValR = 0
	            	ValG = 0
	            	ValB = 0
				Else
					ValR = 0
	            	ValG = 0
	            	ValB = 100
				End If	
			Else
	            ValR = IR_Palette(scaleP,0)
	            ValG = IR_Palette(scaleP,1)
	            ValB = IR_Palette(scaleP,2)
			End If
		End If
			'Change the following if you want to flip the display
			' IR-Blue: DrawIRPixel(x, 35- y, ValR, ValG, ValB)
			' MarDaSo: DrawIRPixel(143-x, y, ValR, ValG, ValB)
			DrawIRPixel(x, 35- y, ValR, ValG, ValB)
		Next
	Next 
	IRData.BringToFront
	IRData.Invalidate
End Sub

Sub DrawPalettte(pstep, Palette As Int)
	Dim pixPalh As Int
	Dim pixPalw As Int
	Dim startPalposX As Int
	Dim lstep As Int

	pixPalw = Round((PalView.Width/pstep))
	pixPalh = PalView.Height 
	For lstep = 0 To (pstep -1)
		startPalposX = lstep * pixPalw
		PixColor((lstep+1), 0, pstep, Palette)
		IR_Palette((lstep+1),0) = ValR
		IR_Palette((lstep+1),1) = ValG
		IR_Palette((lstep+1),2) = ValB
		Rect2.Initialize(startPalposX, 0, (startPalposX + pixPalw), pixPalh)
		csvPalview.DrawRect( Rect2, Colors.ARGB(255, ValR, ValG, ValB), True, 2dip)
		PalView.Invalidate2(Rect2)
	Next
	Rect2.Initialize(0, 0, PalView.Width, pixPalh)
	csvPalview.DrawRect( Rect2, Colors.ARGB(255, 255, 255, 255), False, 4dip)
	PalView.Invalidate2(Rect2)
End Sub

Sub DrawPalettteV(pstep, Palette As Int)
	'Vertical Palette
	Dim pixPalh As Int
	Dim pixPalw As Int
	Dim startPalposX As Int
	Dim lstep As Int

	pixPalw = Round((PalView.Height/pstep))
	pixPalh = PalView.Width  
	For lstep = 0 To (pstep -1)
		startPalposX = lstep * pixPalw
		PixColor((pstep - lstep+1), 0, pstep, Palette)
		IR_Palette((pstep - lstep+1),0) = ValR
		IR_Palette((pstep - lstep+1),1) = ValG
		IR_Palette((pstep - lstep+1),2) = ValB
		Rect2.Initialize(0, startPalposX, pixPalh, (startPalposX + pixPalw))
		csvPalview.DrawRect( Rect2, Colors.ARGB(255, ValR, ValG, ValB), True, 2dip)
		PalView.Invalidate2(Rect2)
	Next
	Rect2.Initialize(0, 0, PalView.Width, PalView.Height )
	csvPalview.DrawRect( Rect2, Colors.ARGB(255, 255, 255, 255), False, 4dip)
	PalView.Invalidate2(Rect2)
End Sub

Sub Timer1_Tick
'Handling of the serial data
	If connected = True Then
		If SerOn = True Then
			If TextReader1.Ready  Then 'check if there is any data waiting to be read
			     DataCalc = TextReader1.ReadLine ' & CRLF
				If  DataCalc.Length > 192 Then
					Timer2.Enabled = False
					Calculation
					Timer2.Enabled = True
				End If

			End If
		End If	
	End If
End Sub

Sub Timer2_Tick
'Display refresh
	If connected = True Then
		DrawIRDATA
	End If	
End Sub
